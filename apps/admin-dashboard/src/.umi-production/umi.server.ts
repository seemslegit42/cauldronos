// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import 'C:/Users/DevToolsUser/cauldronos/apps/admin-dashboard/src/global.css';
import { getClientRootComponent } from 'C:/Users/DevToolsUser/cauldronos/node_modules/.pnpm/@umijs+renderer-react@4.4.9_8637724ac9176005f5615186b7ccc823/node_modules/@umijs/renderer-react/dist/server.js';
import { getRoutes } from './core/route';
import { createHistory as createClientHistory } from './core/history';
import { ServerInsertedHTMLContext } from './core/serverInsertedHTMLContext';
import { createPluginManager } from './core/plugin';
import createRequestHandler, { createMarkupGenerator, createUmiHandler, createUmiServerLoader, createAppRootElement } from 'C:/Users/DevToolsUser/cauldronos/node_modules/.pnpm/@umijs+server@4.4.9/node_modules/@umijs/server/dist/ssr.js';
import fs from 'fs';
import path from 'path';
import 'C:/Users/DevToolsUser/cauldronos/apps/admin-dashboard/src/.umi-production/plugin-tailwindcss/tailwind.css';

let helmetContext;

try {
  helmetContext = require('./core/helmetContext').context;
} catch { /* means `helmet: false`, do noting */ }

const routesWithServerLoader = {
};

export function getManifest(sourceDir) {
  let manifestPath;
  if (process.env.SSR_MANIFEST) {
    return JSON.parse(process.env.SSR_MANIFEST)
  } 
  if (sourceDir) {
    manifestPath = path.join(sourceDir,'build-manifest.json')
  }
  else {
    manifestPath = 'C:/Users/DevToolsUser/cauldronos/apps/admin-dashboard/dist/build-manifest.json'
  }
  if (fs.existsSync(manifestPath)) {
    return JSON.parse(fs.readFileSync(manifestPath), 'utf-8');
  }
  return {
    assets: {}
  }
}

export function createHistory(opts) {
  return createClientHistory(opts);
}

// TODO: remove global variable
global.g_getAssets = (fileName) => {
  let m = getManifest();
  return m.assets[fileName];
};
const createOpts = {
  routesWithServerLoader,
  reactVersion: '18.3.1',
  pluginManager: createPluginManager(),
  getRoutes,
  manifest: getManifest,
  getClientRootComponent,
  helmetContext,
  createHistory,
  ServerInsertedHTMLContext,
  htmlPageOpts: {"headScripts":[],"styles":[],"title":"CauldronOS Admin Dashboard","favicons":["/favicon.ico"],"links":[],"metas":[{"name":"description","content":"CauldronOS Admin Dashboard"},{"name":"theme-color","content":"#00F0FF"}],"scripts":[]},
 __INTERNAL_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {"pureApp":false,"pureHtml":false},
  mountElementId: 'root',
  basename: '/',
  useStream: true
};
const requestHandler = createRequestHandler(createOpts);
/**
 * @deprecated  Please use `requestHandler` instead.
 */
export const renderRoot = createUmiHandler(createOpts);
/**
 * @deprecated  Please use `requestHandler` instead.
 */
export const serverLoader = createUmiServerLoader(createOpts);

export const _markupGenerator = createMarkupGenerator(createOpts);

export const getAppRootElement = createAppRootElement.bind(null, createOpts)();

export default requestHandler;

export const g_umi = '4.4.9'


    if (typeof window !== 'undefined') {
      window.g_umi = {
        version: '4.4.9',
      };
    }
