import React, { useState, useEffect } from 'react';
import { Card, CardProps } from '../Card';
import { Skeleton, Typography, Space, Tag, Tooltip } from 'antd';
import { motion } from 'framer-motion';
import { useMotion } from '../../animations/MotionProvider';
import { transitions } from '../../animations/transitions';
import { BrainCircuit, Sparkles, Bot, AlertCircle } from 'lucide-react';

const { Text, Title } = Typography;

export interface AICardProps extends Omit<CardProps, 'loading'> {
  title: React.ReactNode;
  description?: React.ReactNode;
  model?: string;
  confidence?: number;
  isGenerating?: boolean;
  isError?: boolean;
  errorMessage?: string;
  tags?: string[];
  footer?: React.ReactNode;
  onRetry?: () => void;
}

/**
 * AI-native card component for displaying AI-generated content
 * with appropriate loading states, confidence indicators, and metadata
 */
export const AICard: React.FC<AICardProps> = ({
  title,
  description,
  model,
  confidence = 0,
  isGenerating = false,
  isError = false,
  errorMessage,
  tags = [],
  footer,
  onRetry,
  className = '',
  ...props
}) => {
  const { reducedMotion } = useMotion();
  const [isVisible, setIsVisible] = useState(false);

  // Animate in after mount
  useEffect(() => {
    const timer = setTimeout(() => {
      setIsVisible(true);
    }, 100);
    return () => clearTimeout(timer);
  }, []);

  // Get confidence level color
  const getConfidenceColor = (level: number) => {
    if (level >= 0.8) return '#52c41a'; // High confidence - green
    if (level >= 0.5) return '#faad14'; // Medium confidence - yellow
    return '#ff4d4f'; // Low confidence - red
  };

  // Get confidence level label
  const getConfidenceLabel = (level: number) => {
    if (level >= 0.8) return 'High';
    if (level >= 0.5) return 'Medium';
    return 'Low';
  };

  // Render loading state
  if (isGenerating) {
    return (
      <Card
        className={`ai-card ai-card-loading ${className}`}
        variant="cyber"
        hoverEffect="glow"
        {...props}
      >
        <Skeleton active avatar paragraph={{ rows: 4 }} />
        <div className="ai-card-footer">
          <Space>
            <Text type="secondary">
              <Bot size={14} /> Generating with {model || 'AI'}...
            </Text>
          </Space>
        </div>
      </Card>
    );
  }

  // Render error state
  if (isError) {
    return (
      <Card
        className={`ai-card ai-card-error ${className}`}
        variant="cyber"
        {...props}
      >
        <Space direction="vertical" size="middle">
          <Space>
            <AlertCircle color="#ff4d4f" />
            <Title level={5} style={{ margin: 0, color: '#ff4d4f' }}>
              Error generating content
            </Title>
          </Space>
          
          {errorMessage && (
            <Text type="secondary">{errorMessage}</Text>
          )}
          
          {onRetry && (
            <motion.button
              className="ai-retry-button"
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={onRetry}
              disabled={isGenerating}
            >
              Retry
            </motion.button>
          )}
        </Space>
      </Card>
    );
  }

  // Render content with animation
  const content = (
    <Card
      className={`ai-card ${className}`}
      variant="cyber"
      hoverEffect="glow"
      {...props}
    >
      <Space direction="vertical" size="middle" style={{ width: '100%' }}>
        <div className="ai-card-header">
          <Title level={4} style={{ margin: 0 }}>
            {title}
          </Title>
          
          {model && (
            <Tooltip title={`Generated by ${model}`}>
              <Tag color="purple" className="ai-model-tag">
                <BrainCircuit size={12} />
                <span>{model}</span>
              </Tag>
            </Tooltip>
          )}
        </div>
        
        {description && (
          <div className="ai-card-content">
            {description}
          </div>
        )}
        
        <div className="ai-card-meta">
          {confidence > 0 && (
            <Tooltip title={`${Math.round(confidence * 100)}% confidence`}>
              <Tag color={getConfidenceColor(confidence)} className="ai-confidence-tag">
                <Sparkles size={12} />
                <span>{getConfidenceLabel(confidence)} confidence</span>
              </Tag>
            </Tooltip>
          )}
          
          {tags.map((tag, index) => (
            <Tag key={index} className="ai-tag">
              {tag}
            </Tag>
          ))}
        </div>
        
        {footer && (
          <div className="ai-card-footer">
            {footer}
          </div>
        )}
      </Space>
    </Card>
  );

  // Apply entrance animation if not in reduced motion mode
  if (reducedMotion) {
    return content;
  }

  return (
    <motion.div
      initial="hidden"
      animate={isVisible ? "visible" : "hidden"}
      variants={transitions.fadeIn}
    >
      {content}
    </motion.div>
  );
};

export default AICard;