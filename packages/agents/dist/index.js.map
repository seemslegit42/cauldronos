{"version":3,"sources":["../src/index.ts","../src/AIProvider.tsx","../src/AIAssistantProvider.tsx"],"sourcesContent":["/**\r\n * Agents package\r\n */\r\n\r\n// Core agent types\r\nexport { default as AIProvider } from './AIProvider';\r\nexport { default as AIAssistantProvider } from './AIAssistantProvider';\r\n\r\n// Export a simple placeholder for now to make the build pass\r\nexport const CauldronAgents = {\r\n  version: '0.1.0',\r\n  name: 'CauldronOS Agents'\r\n};","import React, { createContext, useContext } from 'react';\n\n// Context type\ninterface AIMessage {\n  id: string;\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n  timestamp: Date;\n}\n\ninterface AIContextType {\n  isVisible: boolean;\n  toggleVisibility: () => void;\n  messages: AIMessage[];\n  addMessage: (message: Omit<AIMessage, 'id' | 'timestamp'>) => void;\n  clearMessages: () => void;\n  sendMessage: (content: string, contextData?: any) => Promise<AIMessage>;\n  sendMessageStreaming: (content: string, contextData?: any, onChunk?: (chunk: any) => void) => Promise<AIMessage>;\n  contextData: Record<string, any>;\n  updateContextData: (data: Record<string, any>) => void;\n  useSwarm: boolean;\n  toggleUseSwarm: () => void;\n  isProcessing: boolean;\n}\n\n// Create context with default values\nconst AIContext = createContext<AIContextType>({\n  isVisible: false,\n  toggleVisibility: () => {},\n  messages: [],\n  addMessage: () => {},\n  clearMessages: () => {},\n  sendMessage: async () => ({ id: '', role: 'assistant', content: '', timestamp: new Date() }),\n  sendMessageStreaming: async () => ({ id: '', role: 'assistant', content: '', timestamp: new Date() }),\n  contextData: {},\n  updateContextData: () => {},\n  useSwarm: true,\n  toggleUseSwarm: () => {},\n  isProcessing: false\n});\n\n// Hook to use the AI context\nexport const useAI = () => useContext(AIContext);\n\ninterface AIProviderProps {\n  children: React.ReactNode;\n}\n\n/**\n * Provider component that makes the AI functionality available throughout the application.\n * It manages the state of the AI and provides methods to interact with it.\n * This implementation uses Zustand for state management.\n */\nexport const AIProvider: React.FC<AIProviderProps> = ({ children }) => {\n  // Create a simplified context value for the build\n  const contextValue: AIContextType = {\n    isVisible: false,\n    toggleVisibility: () => {},\n    messages: [],\n    addMessage: () => {},\n    clearMessages: () => {},\n    sendMessage: async () => ({ id: '', role: 'assistant', content: '', timestamp: new Date() }),\n    sendMessageStreaming: async () => ({ id: '', role: 'assistant', content: '', timestamp: new Date() }),\n    contextData: {},\n    updateContextData: () => {},\n    useSwarm: true,\n    toggleUseSwarm: () => {},\n    isProcessing: false\n  };\n\n  return (\n    <AIContext.Provider value={contextValue}>\n      {children}\n    </AIContext.Provider>\n  );\n};\n\n// Export default for compatibility\nexport default AIProvider;\n","import React, { createContext, useContext } from 'react';\n\n// Define AIMessage type\ninterface AIMessage {\n  id: string;\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n  timestamp: Date;\n  type?: 'text' | 'markdown' | 'code';\n}\n\n// Context type\ninterface AIAssistantContextType {\n  isVisible: boolean;\n  toggleVisibility: () => void;\n  messages: AIMessage[];\n  addMessage: (message: AIMessage) => void;\n  clearMessages: () => void;\n  sendMessage: (content: string, contextData?: any) => Promise<AIMessage>;\n  contextData: Record<string, any>;\n  updateContextData: (data: Record<string, any>) => void;\n}\n\n// Create context with default values\nconst AIAssistantContext = createContext<AIAssistantContextType>({\n  isVisible: false,\n  toggleVisibility: () => {},\n  messages: [],\n  addMessage: () => {},\n  clearMessages: () => {},\n  sendMessage: async () => ({ id: '', role: 'assistant', content: '', timestamp: new Date() }),\n  contextData: {},\n  updateContextData: () => {}\n});\n\n// Hook to use the AI Assistant context\nexport const useAIAssistant = () => useContext(AIAssistantContext);\n\ninterface AIAssistantProviderProps {\n  children: React.ReactNode;\n}\n\n/**\n * Provider component that makes the AI Assistant available throughout the application.\n * It manages the state of the assistant and provides methods to interact with it.\n */\nexport const AIAssistantProvider: React.FC<AIAssistantProviderProps> = ({ children }) => {\n  // Create a simplified context value for the build\n  const contextValue: AIAssistantContextType = {\n    isVisible: false,\n    toggleVisibility: () => {},\n    messages: [],\n    addMessage: () => {},\n    clearMessages: () => {},\n    sendMessage: async () => ({ id: '', role: 'assistant', content: '', timestamp: new Date() }),\n    contextData: {},\n    updateContextData: () => {}\n  };\n\n  return (\n    <AIAssistantContext.Provider value={contextValue}>\n      {children}\n    </AIAssistantContext.Provider>\n  );\n};\n\n// Export default for compatibility\nexport default AIAssistantProvider;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,mBAAiD;AAuE7C;AA7CJ,IAAM,gBAAY,4BAA6B;AAAA,EAC7C,WAAW;AAAA,EACX,kBAAkB,MAAM;AAAA,EAAC;AAAA,EACzB,UAAU,CAAC;AAAA,EACX,YAAY,MAAM;AAAA,EAAC;AAAA,EACnB,eAAe,MAAM;AAAA,EAAC;AAAA,EACtB,aAAa,aAAa,EAAE,IAAI,IAAI,MAAM,aAAa,SAAS,IAAI,WAAW,oBAAI,KAAK,EAAE;AAAA,EAC1F,sBAAsB,aAAa,EAAE,IAAI,IAAI,MAAM,aAAa,SAAS,IAAI,WAAW,oBAAI,KAAK,EAAE;AAAA,EACnG,aAAa,CAAC;AAAA,EACd,mBAAmB,MAAM;AAAA,EAAC;AAAA,EAC1B,UAAU;AAAA,EACV,gBAAgB,MAAM;AAAA,EAAC;AAAA,EACvB,cAAc;AAChB,CAAC;AAcM,IAAM,aAAwC,CAAC,EAAE,SAAS,MAAM;AAErE,QAAM,eAA8B;AAAA,IAClC,WAAW;AAAA,IACX,kBAAkB,MAAM;AAAA,IAAC;AAAA,IACzB,UAAU,CAAC;AAAA,IACX,YAAY,MAAM;AAAA,IAAC;AAAA,IACnB,eAAe,MAAM;AAAA,IAAC;AAAA,IACtB,aAAa,aAAa,EAAE,IAAI,IAAI,MAAM,aAAa,SAAS,IAAI,WAAW,oBAAI,KAAK,EAAE;AAAA,IAC1F,sBAAsB,aAAa,EAAE,IAAI,IAAI,MAAM,aAAa,SAAS,IAAI,WAAW,oBAAI,KAAK,EAAE;AAAA,IACnG,aAAa,CAAC;AAAA,IACd,mBAAmB,MAAM;AAAA,IAAC;AAAA,IAC1B,UAAU;AAAA,IACV,gBAAgB,MAAM;AAAA,IAAC;AAAA,IACvB,cAAc;AAAA,EAChB;AAEA,SACE,4CAAC,UAAU,UAAV,EAAmB,OAAO,cACxB,UACH;AAEJ;AAGA,IAAO,qBAAQ;;;AC9Ef,IAAAA,gBAAiD;AA4D7C,IAAAC,sBAAA;AApCJ,IAAM,yBAAqB,6BAAsC;AAAA,EAC/D,WAAW;AAAA,EACX,kBAAkB,MAAM;AAAA,EAAC;AAAA,EACzB,UAAU,CAAC;AAAA,EACX,YAAY,MAAM;AAAA,EAAC;AAAA,EACnB,eAAe,MAAM;AAAA,EAAC;AAAA,EACtB,aAAa,aAAa,EAAE,IAAI,IAAI,MAAM,aAAa,SAAS,IAAI,WAAW,oBAAI,KAAK,EAAE;AAAA,EAC1F,aAAa,CAAC;AAAA,EACd,mBAAmB,MAAM;AAAA,EAAC;AAC5B,CAAC;AAaM,IAAM,sBAA0D,CAAC,EAAE,SAAS,MAAM;AAEvF,QAAM,eAAuC;AAAA,IAC3C,WAAW;AAAA,IACX,kBAAkB,MAAM;AAAA,IAAC;AAAA,IACzB,UAAU,CAAC;AAAA,IACX,YAAY,MAAM;AAAA,IAAC;AAAA,IACnB,eAAe,MAAM;AAAA,IAAC;AAAA,IACtB,aAAa,aAAa,EAAE,IAAI,IAAI,MAAM,aAAa,SAAS,IAAI,WAAW,oBAAI,KAAK,EAAE;AAAA,IAC1F,aAAa,CAAC;AAAA,IACd,mBAAmB,MAAM;AAAA,IAAC;AAAA,EAC5B;AAEA,SACE,6CAAC,mBAAmB,UAAnB,EAA4B,OAAO,cACjC,UACH;AAEJ;AAGA,IAAO,8BAAQ;;;AF1DR,IAAM,iBAAiB;AAAA,EAC5B,SAAS;AAAA,EACT,MAAM;AACR;","names":["import_react","import_jsx_runtime"]}